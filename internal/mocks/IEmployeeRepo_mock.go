// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	model "github.com/maxwelbm/alkemy-g7.git/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// MockIEmployeeRepo is an autogenerated mock type for the IEmployeeRepo type
type MockIEmployeeRepo struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id
func (_m *MockIEmployeeRepo) Delete(id int) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with no fields
func (_m *MockIEmployeeRepo) Get() ([]model.Employee, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []model.Employee
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]model.Employee, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []model.Employee); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Employee)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *MockIEmployeeRepo) GetByID(id int) (model.Employee, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 model.Employee
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (model.Employee, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) model.Employee); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(model.Employee)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInboundOrdersReportByEmployee provides a mock function with given fields: employeeID
func (_m *MockIEmployeeRepo) GetInboundOrdersReportByEmployee(employeeID int) (model.InboundOrdersReportByEmployee, error) {
	ret := _m.Called(employeeID)

	if len(ret) == 0 {
		panic("no return value specified for GetInboundOrdersReportByEmployee")
	}

	var r0 model.InboundOrdersReportByEmployee
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (model.InboundOrdersReportByEmployee, error)); ok {
		return rf(employeeID)
	}
	if rf, ok := ret.Get(0).(func(int) model.InboundOrdersReportByEmployee); ok {
		r0 = rf(employeeID)
	} else {
		r0 = ret.Get(0).(model.InboundOrdersReportByEmployee)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(employeeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInboundOrdersReports provides a mock function with no fields
func (_m *MockIEmployeeRepo) GetInboundOrdersReports() ([]model.InboundOrdersReportByEmployee, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetInboundOrdersReports")
	}

	var r0 []model.InboundOrdersReportByEmployee
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]model.InboundOrdersReportByEmployee, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []model.InboundOrdersReportByEmployee); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.InboundOrdersReportByEmployee)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Post provides a mock function with given fields: employee
func (_m *MockIEmployeeRepo) Post(employee model.Employee) (model.Employee, error) {
	ret := _m.Called(employee)

	if len(ret) == 0 {
		panic("no return value specified for Post")
	}

	var r0 model.Employee
	var r1 error
	if rf, ok := ret.Get(0).(func(model.Employee) (model.Employee, error)); ok {
		return rf(employee)
	}
	if rf, ok := ret.Get(0).(func(model.Employee) model.Employee); ok {
		r0 = rf(employee)
	} else {
		r0 = ret.Get(0).(model.Employee)
	}

	if rf, ok := ret.Get(1).(func(model.Employee) error); ok {
		r1 = rf(employee)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, employee
func (_m *MockIEmployeeRepo) Update(id int, employee model.Employee) (model.Employee, error) {
	ret := _m.Called(id, employee)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 model.Employee
	var r1 error
	if rf, ok := ret.Get(0).(func(int, model.Employee) (model.Employee, error)); ok {
		return rf(id, employee)
	}
	if rf, ok := ret.Get(0).(func(int, model.Employee) model.Employee); ok {
		r0 = rf(id, employee)
	} else {
		r0 = ret.Get(0).(model.Employee)
	}

	if rf, ok := ret.Get(1).(func(int, model.Employee) error); ok {
		r1 = rf(id, employee)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockIEmployeeRepo creates a new instance of MockIEmployeeRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIEmployeeRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIEmployeeRepo {
	mock := &MockIEmployeeRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
