// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	model "github.com/maxwelbm/alkemy-g7.git/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// MockIProductService is an autogenerated mock type for the IProductService type
type MockIProductService struct {
	mock.Mock
}

// CreateProduct provides a mock function with given fields: product
func (_m *MockIProductService) CreateProduct(product model.Product) (model.Product, error) {
	ret := _m.Called(product)

	if len(ret) == 0 {
		panic("no return value specified for CreateProduct")
	}

	var r0 model.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(model.Product) (model.Product, error)); ok {
		return rf(product)
	}
	if rf, ok := ret.Get(0).(func(model.Product) model.Product); ok {
		r0 = rf(product)
	} else {
		r0 = ret.Get(0).(model.Product)
	}

	if rf, ok := ret.Get(1).(func(model.Product) error); ok {
		r1 = rf(product)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProduct provides a mock function with given fields: id
func (_m *MockIProductService) DeleteProduct(id int) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProduct")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllProducts provides a mock function with no fields
func (_m *MockIProductService) GetAllProducts() ([]model.Product, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllProducts")
	}

	var r0 []model.Product
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]model.Product, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []model.Product); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Product)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductByID provides a mock function with given fields: id
func (_m *MockIProductService) GetProductByID(id int) (model.Product, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetProductByID")
	}

	var r0 model.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (model.Product, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) model.Product); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(model.Product)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProduct provides a mock function with given fields: id, product
func (_m *MockIProductService) UpdateProduct(id int, product model.Product) (model.Product, error) {
	ret := _m.Called(id, product)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProduct")
	}

	var r0 model.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(int, model.Product) (model.Product, error)); ok {
		return rf(id, product)
	}
	if rf, ok := ret.Get(0).(func(int, model.Product) model.Product); ok {
		r0 = rf(id, product)
	} else {
		r0 = ret.Get(0).(model.Product)
	}

	if rf, ok := ret.Get(1).(func(int, model.Product) error); ok {
		r1 = rf(id, product)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockIProductService creates a new instance of MockIProductService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIProductService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIProductService {
	mock := &MockIProductService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
