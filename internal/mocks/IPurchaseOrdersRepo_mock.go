// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	model "github.com/maxwelbm/alkemy-g7.git/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// MockIPurchaseOrdersRepo is an autogenerated mock type for the IPurchaseOrdersRepo type
type MockIPurchaseOrdersRepo struct {
	mock.Mock
}

// GetByID provides a mock function with given fields: id
func (_m *MockIPurchaseOrdersRepo) GetByID(id int) (model.PurchaseOrder, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 model.PurchaseOrder
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (model.PurchaseOrder, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) model.PurchaseOrder); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(model.PurchaseOrder)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Post provides a mock function with given fields: newPurchaseOrder
func (_m *MockIPurchaseOrdersRepo) Post(newPurchaseOrder model.PurchaseOrder) (int64, error) {
	ret := _m.Called(newPurchaseOrder)

	if len(ret) == 0 {
		panic("no return value specified for Post")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(model.PurchaseOrder) (int64, error)); ok {
		return rf(newPurchaseOrder)
	}
	if rf, ok := ret.Get(0).(func(model.PurchaseOrder) int64); ok {
		r0 = rf(newPurchaseOrder)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(model.PurchaseOrder) error); ok {
		r1 = rf(newPurchaseOrder)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockIPurchaseOrdersRepo creates a new instance of MockIPurchaseOrdersRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIPurchaseOrdersRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIPurchaseOrdersRepo {
	mock := &MockIPurchaseOrdersRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
