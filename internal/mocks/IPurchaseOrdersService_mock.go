// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	model "github.com/maxwelbm/alkemy-g7.git/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// MockIPurchaseOrdersService is an autogenerated mock type for the IPurchaseOrdersService type
type MockIPurchaseOrdersService struct {
	mock.Mock
}

// CreatePurchaseOrder provides a mock function with given fields: newPurchaseOrder
func (_m *MockIPurchaseOrdersService) CreatePurchaseOrder(newPurchaseOrder model.PurchaseOrder) (model.PurchaseOrder, error) {
	ret := _m.Called(newPurchaseOrder)

	if len(ret) == 0 {
		panic("no return value specified for CreatePurchaseOrder")
	}

	var r0 model.PurchaseOrder
	var r1 error
	if rf, ok := ret.Get(0).(func(model.PurchaseOrder) (model.PurchaseOrder, error)); ok {
		return rf(newPurchaseOrder)
	}
	if rf, ok := ret.Get(0).(func(model.PurchaseOrder) model.PurchaseOrder); ok {
		r0 = rf(newPurchaseOrder)
	} else {
		r0 = ret.Get(0).(model.PurchaseOrder)
	}

	if rf, ok := ret.Get(1).(func(model.PurchaseOrder) error); ok {
		r1 = rf(newPurchaseOrder)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPurchaseOrderByID provides a mock function with given fields: id
func (_m *MockIPurchaseOrdersService) GetPurchaseOrderByID(id int) (model.PurchaseOrder, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetPurchaseOrderByID")
	}

	var r0 model.PurchaseOrder
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (model.PurchaseOrder, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) model.PurchaseOrder); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(model.PurchaseOrder)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockIPurchaseOrdersService creates a new instance of MockIPurchaseOrdersService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIPurchaseOrdersService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIPurchaseOrdersService {
	mock := &MockIPurchaseOrdersService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
