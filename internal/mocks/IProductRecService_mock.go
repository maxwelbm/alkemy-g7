// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	model "github.com/maxwelbm/alkemy-g7.git/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// MockIProductRecService is an autogenerated mock type for the IProductRecService type
type MockIProductRecService struct {
	mock.Mock
}

// CreateProductRecords provides a mock function with given fields: pr
func (_m *MockIProductRecService) CreateProductRecords(pr model.ProductRecords) (model.ProductRecords, error) {
	ret := _m.Called(pr)

	if len(ret) == 0 {
		panic("no return value specified for CreateProductRecords")
	}

	var r0 model.ProductRecords
	var r1 error
	if rf, ok := ret.Get(0).(func(model.ProductRecords) (model.ProductRecords, error)); ok {
		return rf(pr)
	}
	if rf, ok := ret.Get(0).(func(model.ProductRecords) model.ProductRecords); ok {
		r0 = rf(pr)
	} else {
		r0 = ret.Get(0).(model.ProductRecords)
	}

	if rf, ok := ret.Get(1).(func(model.ProductRecords) error); ok {
		r1 = rf(pr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductRecordByID provides a mock function with given fields: id
func (_m *MockIProductRecService) GetProductRecordByID(id int) (model.ProductRecords, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetProductRecordByID")
	}

	var r0 model.ProductRecords
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (model.ProductRecords, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) model.ProductRecords); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(model.ProductRecords)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductRecordReport provides a mock function with given fields: idProduct
func (_m *MockIProductRecService) GetProductRecordReport(idProduct int) ([]model.ProductRecordsReport, error) {
	ret := _m.Called(idProduct)

	if len(ret) == 0 {
		panic("no return value specified for GetProductRecordReport")
	}

	var r0 []model.ProductRecordsReport
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]model.ProductRecordsReport, error)); ok {
		return rf(idProduct)
	}
	if rf, ok := ret.Get(0).(func(int) []model.ProductRecordsReport); ok {
		r0 = rf(idProduct)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ProductRecordsReport)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(idProduct)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockIProductRecService creates a new instance of MockIProductRecService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIProductRecService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIProductRecService {
	mock := &MockIProductRecService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
