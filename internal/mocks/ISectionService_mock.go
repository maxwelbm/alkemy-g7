// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	model "github.com/maxwelbm/alkemy-g7.git/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// MockISectionService is an autogenerated mock type for the ISectionService type
type MockISectionService struct {
	mock.Mock
}

// CountProductBatchesBySectionID provides a mock function with given fields: id
func (_m *MockISectionService) CountProductBatchesBySectionID(id int) (model.SectionProductBatches, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for CountProductBatchesBySectionID")
	}

	var r0 model.SectionProductBatches
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (model.SectionProductBatches, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) model.SectionProductBatches); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(model.SectionProductBatches)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountProductBatchesSections provides a mock function with no fields
func (_m *MockISectionService) CountProductBatchesSections() ([]model.SectionProductBatches, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CountProductBatchesSections")
	}

	var r0 []model.SectionProductBatches
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]model.SectionProductBatches, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []model.SectionProductBatches); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.SectionProductBatches)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *MockISectionService) Delete(id int) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with no fields
func (_m *MockISectionService) Get() ([]model.Section, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []model.Section
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]model.Section, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []model.Section); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Section)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *MockISectionService) GetByID(id int) (model.Section, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 model.Section
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (model.Section, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) model.Section); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(model.Section)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Post provides a mock function with given fields: section
func (_m *MockISectionService) Post(section *model.Section) (model.Section, error) {
	ret := _m.Called(section)

	if len(ret) == 0 {
		panic("no return value specified for Post")
	}

	var r0 model.Section
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Section) (model.Section, error)); ok {
		return rf(section)
	}
	if rf, ok := ret.Get(0).(func(*model.Section) model.Section); ok {
		r0 = rf(section)
	} else {
		r0 = ret.Get(0).(model.Section)
	}

	if rf, ok := ret.Get(1).(func(*model.Section) error); ok {
		r1 = rf(section)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, section
func (_m *MockISectionService) Update(id int, section *model.Section) (model.Section, error) {
	ret := _m.Called(id, section)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 model.Section
	var r1 error
	if rf, ok := ret.Get(0).(func(int, *model.Section) (model.Section, error)); ok {
		return rf(id, section)
	}
	if rf, ok := ret.Get(0).(func(int, *model.Section) model.Section); ok {
		r0 = rf(id, section)
	} else {
		r0 = ret.Get(0).(model.Section)
	}

	if rf, ok := ret.Get(1).(func(int, *model.Section) error); ok {
		r1 = rf(id, section)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockISectionService creates a new instance of MockISectionService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockISectionService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockISectionService {
	mock := &MockISectionService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
