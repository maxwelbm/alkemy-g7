// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	model "github.com/maxwelbm/alkemy-g7.git/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// MockILocalityRepo is an autogenerated mock type for the ILocalityRepo type
type MockILocalityRepo struct {
	mock.Mock
}

// CreateLocality provides a mock function with given fields: l
func (_m *MockILocalityRepo) CreateLocality(l *model.Locality) (model.Locality, error) {
	ret := _m.Called(l)

	if len(ret) == 0 {
		panic("no return value specified for CreateLocality")
	}

	var r0 model.Locality
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Locality) (model.Locality, error)); ok {
		return rf(l)
	}
	if rf, ok := ret.Get(0).(func(*model.Locality) model.Locality); ok {
		r0 = rf(l)
	} else {
		r0 = ret.Get(0).(model.Locality)
	}

	if rf, ok := ret.Get(1).(func(*model.Locality) error); ok {
		r1 = rf(l)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *MockILocalityRepo) GetByID(id int) (model.Locality, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 model.Locality
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (model.Locality, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) model.Locality); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(model.Locality)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCarriers provides a mock function with given fields: id
func (_m *MockILocalityRepo) GetCarriers(id int) ([]model.LocalitiesJSONCarriers, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetCarriers")
	}

	var r0 []model.LocalitiesJSONCarriers
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]model.LocalitiesJSONCarriers, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) []model.LocalitiesJSONCarriers); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.LocalitiesJSONCarriers)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReportCarriersWithID provides a mock function with given fields: id
func (_m *MockILocalityRepo) GetReportCarriersWithID(id int) ([]model.LocalitiesJSONCarriers, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetReportCarriersWithID")
	}

	var r0 []model.LocalitiesJSONCarriers
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]model.LocalitiesJSONCarriers, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) []model.LocalitiesJSONCarriers); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.LocalitiesJSONCarriers)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReportSellersWithID provides a mock function with given fields: id
func (_m *MockILocalityRepo) GetReportSellersWithID(id int) ([]model.LocalitiesJSONSellers, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetReportSellersWithID")
	}

	var r0 []model.LocalitiesJSONSellers
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]model.LocalitiesJSONSellers, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) []model.LocalitiesJSONSellers); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.LocalitiesJSONSellers)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSellers provides a mock function with given fields: id
func (_m *MockILocalityRepo) GetSellers(id int) ([]model.LocalitiesJSONSellers, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetSellers")
	}

	var r0 []model.LocalitiesJSONSellers
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]model.LocalitiesJSONSellers, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) []model.LocalitiesJSONSellers); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.LocalitiesJSONSellers)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockILocalityRepo creates a new instance of MockILocalityRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockILocalityRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockILocalityRepo {
	mock := &MockILocalityRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
