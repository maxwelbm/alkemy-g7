// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	model "github.com/maxwelbm/alkemy-g7.git/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// MockISellerRepo is an autogenerated mock type for the ISellerRepo type
type MockISellerRepo struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id
func (_m *MockISellerRepo) Delete(id int) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with no fields
func (_m *MockISellerRepo) Get() ([]model.Seller, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []model.Seller
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]model.Seller, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []model.Seller); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Seller)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *MockISellerRepo) GetByID(id int) (model.Seller, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 model.Seller
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (model.Seller, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) model.Seller); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(model.Seller)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Patch provides a mock function with given fields: id, seller
func (_m *MockISellerRepo) Patch(id int, seller *model.Seller) (model.Seller, error) {
	ret := _m.Called(id, seller)

	if len(ret) == 0 {
		panic("no return value specified for Patch")
	}

	var r0 model.Seller
	var r1 error
	if rf, ok := ret.Get(0).(func(int, *model.Seller) (model.Seller, error)); ok {
		return rf(id, seller)
	}
	if rf, ok := ret.Get(0).(func(int, *model.Seller) model.Seller); ok {
		r0 = rf(id, seller)
	} else {
		r0 = ret.Get(0).(model.Seller)
	}

	if rf, ok := ret.Get(1).(func(int, *model.Seller) error); ok {
		r1 = rf(id, seller)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Post provides a mock function with given fields: seller
func (_m *MockISellerRepo) Post(seller *model.Seller) (model.Seller, error) {
	ret := _m.Called(seller)

	if len(ret) == 0 {
		panic("no return value specified for Post")
	}

	var r0 model.Seller
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Seller) (model.Seller, error)); ok {
		return rf(seller)
	}
	if rf, ok := ret.Get(0).(func(*model.Seller) model.Seller); ok {
		r0 = rf(seller)
	} else {
		r0 = ret.Get(0).(model.Seller)
	}

	if rf, ok := ret.Get(1).(func(*model.Seller) error); ok {
		r1 = rf(seller)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockISellerRepo creates a new instance of MockISellerRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockISellerRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockISellerRepo {
	mock := &MockISellerRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
