// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	model "github.com/maxwelbm/alkemy-g7.git/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// MockIBuyerservice is an autogenerated mock type for the IBuyerservice type
type MockIBuyerservice struct {
	mock.Mock
}

// CountPurchaseOrderBuyer provides a mock function with no fields
func (_m *MockIBuyerservice) CountPurchaseOrderBuyer() ([]model.BuyerPurchaseOrder, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CountPurchaseOrderBuyer")
	}

	var r0 []model.BuyerPurchaseOrder
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]model.BuyerPurchaseOrder, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []model.BuyerPurchaseOrder); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.BuyerPurchaseOrder)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountPurchaseOrderByBuyerID provides a mock function with given fields: id
func (_m *MockIBuyerservice) CountPurchaseOrderByBuyerID(id int) (model.BuyerPurchaseOrder, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for CountPurchaseOrderByBuyerID")
	}

	var r0 model.BuyerPurchaseOrder
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (model.BuyerPurchaseOrder, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) model.BuyerPurchaseOrder); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(model.BuyerPurchaseOrder)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateBuyer provides a mock function with given fields: newBuyer
func (_m *MockIBuyerservice) CreateBuyer(newBuyer model.Buyer) (model.Buyer, error) {
	ret := _m.Called(newBuyer)

	if len(ret) == 0 {
		panic("no return value specified for CreateBuyer")
	}

	var r0 model.Buyer
	var r1 error
	if rf, ok := ret.Get(0).(func(model.Buyer) (model.Buyer, error)); ok {
		return rf(newBuyer)
	}
	if rf, ok := ret.Get(0).(func(model.Buyer) model.Buyer); ok {
		r0 = rf(newBuyer)
	} else {
		r0 = ret.Get(0).(model.Buyer)
	}

	if rf, ok := ret.Get(1).(func(model.Buyer) error); ok {
		r1 = rf(newBuyer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBuyerByID provides a mock function with given fields: id
func (_m *MockIBuyerservice) DeleteBuyerByID(id int) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBuyerByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllBuyer provides a mock function with no fields
func (_m *MockIBuyerservice) GetAllBuyer() ([]model.Buyer, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllBuyer")
	}

	var r0 []model.Buyer
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]model.Buyer, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []model.Buyer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Buyer)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBuyerByID provides a mock function with given fields: id
func (_m *MockIBuyerservice) GetBuyerByID(id int) (model.Buyer, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetBuyerByID")
	}

	var r0 model.Buyer
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (model.Buyer, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) model.Buyer); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(model.Buyer)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBuyer provides a mock function with given fields: id, newBuyer
func (_m *MockIBuyerservice) UpdateBuyer(id int, newBuyer model.Buyer) (model.Buyer, error) {
	ret := _m.Called(id, newBuyer)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBuyer")
	}

	var r0 model.Buyer
	var r1 error
	if rf, ok := ret.Get(0).(func(int, model.Buyer) (model.Buyer, error)); ok {
		return rf(id, newBuyer)
	}
	if rf, ok := ret.Get(0).(func(int, model.Buyer) model.Buyer); ok {
		r0 = rf(id, newBuyer)
	} else {
		r0 = ret.Get(0).(model.Buyer)
	}

	if rf, ok := ret.Get(1).(func(int, model.Buyer) error); ok {
		r1 = rf(id, newBuyer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockIBuyerservice creates a new instance of MockIBuyerservice. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIBuyerservice(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIBuyerservice {
	mock := &MockIBuyerservice{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
